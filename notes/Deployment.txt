üöÄ Deploying Your Flask + React App on a DigitalOcean Droplet
Now that your app is set up in GitHub, here‚Äôs how to deploy it on a DigitalOcean Droplet step by step.

üõ† Step 1: Connect to Your Droplet via SSH
Open your terminal on your local machine and connect to your Droplet:

[bash]
ssh root@your-server-ip
Replace your-server-ip with the actual IP of your DigitalOcean Droplet.

üõ† Step 2: Install Required Software on the Droplet
Once inside the Droplet, update and install necessary packages:

[bash]
sudo apt update && sudo apt upgrade -y
sudo apt install python3-pip python3-venv nginx git -y
üõ† Step 3: Clone Your GitHub Repository
Inside your Droplet, navigate to a suitable location (e.g., /var/www/):

[bash]
cd /var/www/
git clone https://github.com/your-username/your-repo.git
cd your-repo
Replace your-username/your-repo with your actual GitHub repository URL.

üõ† Step 4: Set Up the Flask Backend
1Ô∏è‚É£ Create a Virtual Environment and Install Dependencies
Inside the backend folder:

[bash]
cd backend
python3 -m venv venv
source venv/bin/activate
pip install -r requirements.txt
2Ô∏è‚É£ Run Flask App (Test if it Works)
[bash]
python app.py
If it runs successfully, press CTRL+C to stop it.

üõ† Step 5: Set Up a Gunicorn Service for Flask
Instead of running Flask manually, we use Gunicorn for production.

1Ô∏è‚É£ Install Gunicorn
[bash]
pip install gunicorn
2Ô∏è‚É£ Create a Gunicorn Service
Create a new systemd service file:

[bash]
sudo nano /etc/systemd/system/flask.service
Paste the following inside:

ini

[Unit]
Description=Gunicorn instance to serve Flask app
After=network.target

[Service]
User=root
Group=www-data
WorkingDirectory=/var/www/your-repo/backend
Environment="PATH=/var/www/your-repo/backend/venv/bin"
ExecStart=/var/www/your-repo/backend/venv/bin/gunicorn --workers 3 --bind 0.0.0.0:5000 app:app

[Install]
WantedBy=multi-user.target
Save (CTRL+X, then Y, then ENTER).

3Ô∏è‚É£ Start and Enable Gunicorn
[bash]
sudo systemctl daemon-reload
sudo systemctl start flask
sudo systemctl enable flask
Check status:

[bash]
sudo systemctl status flask
If everything is correct, you should see "active (running)."

üõ† Step 6: Set Up Nginx Reverse Proxy
Now, set up Nginx to route traffic to your Flask backend.

1Ô∏è‚É£ Configure Nginx
Open the Nginx configuration:

[bash]
sudo nano /etc/nginx/sites-available/flask
Paste the following:

nginx

server {
    listen 80;
    server_name your-server-ip;

    location / {
        proxy_pass http://127.0.0.1:5000/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }
}
Replace your-server-ip with your actual IP.

Save (CTRL+X, then Y, then ENTER).

2Ô∏è‚É£ Enable the Configuration
[bash]
sudo ln -s /etc/nginx/sites-available/flask /etc/nginx/sites-enabled/
sudo nginx -t  # Test for errors
sudo systemctl restart nginx
üõ† Step 7: Set Up React Frontend
1Ô∏è‚É£ Build React App
Go to your frontend folder:

[bash]
cd /var/www/your-repo/frontend
npm install
npm run build
2Ô∏è‚É£ Serve React Using Nginx
Open Nginx configuration:

[bash]
sudo nano /etc/nginx/sites-available/react
Paste:

nginx

server {
    listen 80;
    server_name your-server-ip;

    root /var/www/your-repo/frontend/build;
    index index.html;
    location / {
        try_files $uri /index.html;
    }
}
Save and enable:

[bash]
sudo ln -s /etc/nginx/sites-available/react /etc/nginx/sites-enabled/
sudo systemctl restart nginx
üõ† Step 8: Set Up a Firewall
[bash]
sudo ufw allow OpenSSH
sudo ufw allow 'Nginx Full'
sudo ufw enable
‚úÖ Done!
Now, open http://your-server-ip in your browser.

Your React frontend should load.

Your Flask backend should be accessible via http://your-server-ip/api.

To Deploy Updates
Whenever you push changes to GitHub:

[bash]
cd /var/www/your-repo
git pull origin main
For backend updates:

[bash]
cd backend
source venv/bin/activate
pip install -r requirements.txt
sudo systemctl restart flask
For frontend updates:

[bash]
cd frontend
npm install
npm run build
sudo systemctl restart nginx
üéØ Next Steps
Secure your server with SSL (Let's Encrypt):

[bash]
sudo apt install certbot python3-certbot-nginx
sudo certbot --nginx -d your-domain.com
Set up a domain name instead of using an IP.

Use PM2 (for Node.js apps) if needed.

Let me know if you need help! üöÄ